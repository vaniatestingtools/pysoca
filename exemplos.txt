##EXEMPLO1
#TESTES
import unittest
import testCoverage
#IMPORT YOUR CODE
import my_func
class TestMyFunctions(unittest.TestCase):
    def test_runner(self):
        self.assertEqual(my_func.ifs(3), 0)
if __name__ == '__main__':
    unittest.main()
#CODIGO
def ifs(a):
    print('asfd')
    for i in (0,a+1):
        if a>3:
            return 1
        if a<3:
            return 0
    if a ==3:
        return 6

##EXEMPLO2
#TESTES
import unittest
import testCoverage
#IMPORT YOUR CODE
import my_func
class TestMyFunctions(unittest.TestCase):
    def test_runner(self):
        self.assertEqual(my_func.shortBubbleSort([1,2,3]), [1,2,3])
if __name__ == '__main__':
    unittest.main()

#CODE
def shortBubbleSort(alist):
    exchanges = True
    passnum = len(alist)-1
    while passnum > 0 and exchanges:
       exchanges = False
       for i in range(passnum):
           if alist[i]>alist[i+1]:
               exchanges = True
               temp = alist[i]
               alist[i] = alist[i+1]
               alist[i+1] = temp
       passnum = passnum-1
    return alist

##EXEMPLO3
#TESTES
import unittest
import testCoverage
#IMPORT YOUR CODE
import my_func
class TestMyFunctions(unittest.TestCase):
    def test_runner(self):
        self.assertEqual(my_func.func([1,2,3]), [1,2,3])
if __name__ == '__main__':
    unittest.main()

#CODE
def func(a):
    b = a
    try:
        with open(a, "w") as f:
            b = f.readline()
    except FileNotFoundError:
        print("File not found or could not be loaded")
    except:
        print("File not found or could not be loaded")
    finally:
        exchanges = True
        passnum = len(b) - 1
        while passnum > 0 and exchanges:
            exchanges = False
            for i in range(passnum):
                if b[i] > b[i + 1]:
                    exchanges = True
                    temp = b[i]
                    b[i] = b[i + 1]
                    b[i + 1] = temp
            passnum = passnum - 1
        return b


##EXEMPLO4
#TESTES
import unittest
import testCoverage
#IMPORT YOUR CODE
import my_func
class TestMyFunctions(unittest.TestCase):
    def test_runner(self):
        self.assertEqual(my_func.insertionSort([1,2,3]), [1,2,3])
if __name__ == '__main__':
    unittest.main()

#CODIGO
def insertionSort(arr):
    # Traverse through 1 to len(arr)
    for i in range(1, len(arr)):

        key = arr[i]
        # Move elements of arr[0..i-1], that are
        # greater than key, to one position ahead
        # of their current position
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr
    while j >= 0 and key < arr[j]:
        arr[j + 1] = arr[j]
        j -= 1
